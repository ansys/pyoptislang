name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'ansys-optislang-core'
  PACKAGE_NAMESPACE: 'ansys.optislang.core'
  DOCUMENTATION_CNAME: 'optislang.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: pyansys/actions/code-style@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  wheelhouse:
    name: Wheelhouse and smoke tests
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: pyansys/actions/build-wheelhouse@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  macos-wheelhouse:
    name: Build and Smoke tests (macOS)
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: macos-latest
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: pyansys/actions/build-wheelhouse@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: "macos-latest"
          python-version: ${{ matrix.python-version }}

  tests:
    name: Tests
    needs: [wheelhouse]
    runs-on: ${{ matrix.os }}
    env:
      PYTEST_EXTRA_ARGS: "--cov=ansys.optislang.core --cov-report=term --cov-report=xml:.cov/coverage.xml --cov-report=html:.cov/html"
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
      fail-fast: false

    steps:
      - name: Run pytest with desired markers and extra arguments
        uses: pyansys/actions/tests-pytest@v3
        with:
          python-version: ${{ matrix.python-version }}
          pytest-extra-args: ${{ env.PYTEST_EXTRA_ARGS }}

      - name: Upload coverage results as artifacts
        uses: actions/upload-artifact@v3
        if: |
          (matrix.python-version == env.MAIN_PYTHON_VERSION) &&
          (runner.os == 'Linux')
        with:
          name: HTML-Coverage
          path: .cov/html
          retention-days: 7

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   if: |
      #     (matrix.cfg.python-version == env.MAIN_PYTHON_VERSION) &&
      #     (runner.os ==  'Linux')
      #   with:
      #     files: .cov/coverage.xml

  macos-tests:
    name: Tests (macOS)
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: macos-latest
    needs: [macos-wheelhouse]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Run pytest on macOS
        uses: pyansys/actions/tests-pytest@v3
        with:
          python-version: ${{ matrix.python-version }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [docs-style]
    steps:
      - name: "Run Ansys documentation building action"
        uses: pyansys/actions/doc-build@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          sphinxopts: "-j auto --color -vW"
          dependencies: "pandoc"

  package:
    name: Package library
    needs: [tests, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package, macos-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the private PyPI repository
        uses: pyansys/actions/release-pypi-private@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: Release to GitHub
        uses: pyansys/actions/release-github@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: pyansys/actions/doc-deploy-dev@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: pyansys/actions/doc-deploy-stable@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
