name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.13'
  PACKAGE_NAME: 'ansys-optislang-core'
  PACKAGE_NAMESPACE: 'ansys.optislang.core'
  DOCUMENTATION_CNAME: 'optislang.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:

  style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  typing:
    name: "Type check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - shell: bash
        name: "Setup environment"
        run: |
          python -m venv venv
          . ./venv/bin/activate
          python -m pip install .[typing]
      - shell: bash
        name: "Run mypy"
        run: |
          . ./venv/bin/activate
          python -m mypy src


  doc-style:
    name: "Doc style check"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "3.4.1"

  wheelhouse:
    name: "Wheelhouse and smoke tests"
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          check-licenses: ${{ matrix.python-version != '3.9' }}

  tests:
    name: "Test ${{ matrix.os }} using Python ${{ matrix.python-version }}"
    needs: [wheelhouse]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    steps:
      - name: "Run pytest with desired markers and extra arguments"
        uses: ansys/actions/tests-pytest@v10
        with:
          python-version: ${{ matrix.python-version }}
          pytest-extra-args:  --cov=ansys.optislang.core --cov-report=term --cov-report=xml:.cov/coverage.xml --cov-report=html:.cov/html

      - name: "Upload coverage results as artifacts"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION && runner.os == 'Linux' }}
        with:
          name: HTML-Coverage
          path: .cov/html
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION && runner.os == 'Linux' }}
        with:
          files: .cov/coverage.xml

  security:
    name: "Security checks"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-actions-security@v10
        with:
          generate-summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          auditing-level: 'high'
          trust-ansys-actions: true

  vulnerabilities:
    name: "Vulnerability check"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-vulnerabilities@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          python-package-name: 'ansys-optislang-core'
          dev-mode: ${{ github.ref != 'refs/heads/main' }}
          bandit-configfile: "pyproject.toml"

  doc:
    name: "Documentation"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      #- name: Install Quarto
        #uses: quarto-dev/quarto-actions/setup@9e48da27e184aa238fcb49f5db75469626d43adb # v2.1.9
      #- name: Check Quarto Version
        #shell: bash
        #run: |
          #quarto --version
      #- name: Verify tinytex is installed
        #run: |
          #quarto install tinytex --no-prompt --update-path
      - name: Build Documentation
        uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          dependencies: "pandoc jupyter"
          needs-quarto: true

  build-library:
    name: "Build library"
    needs: [doc, tests]
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: build-library
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Download the library artifacts from build-library step"
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ env.PACKAGE_NAME }}-artifacts
          path: ${{ env.PACKAGE_NAME }}-artifacts

      - name: "Upload artifacts to PyPI using trusted publisher"
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.PACKAGE_NAME }}-artifacts
          skip-existing: false

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_dev_docs:
    name: "Upload development documentation"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-library
    permissions:
      contents: write
    steps:
      - uses: ansys/actions/doc-deploy-dev@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  upload_docs_release:
    name: "Upload release documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write
    steps:
      - uses: ansys/actions/doc-deploy-stable@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
