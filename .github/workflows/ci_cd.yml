name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.13'
  PACKAGE_NAME: 'ansys-optislang-core'
  PACKAGE_NAMESPACE: 'ansys.optislang.core'
  DOCUMENTATION_CNAME: 'optislang.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  typing:
    name: "Type check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - shell: bash
        name: "Setup environment"
        run: |
          python -m venv venv
          . ./venv/bin/activate
          python -m pip install .[typing]
      - shell: bash
        name: "Run mypy"
        run: |
          . ./venv/bin/activate
          python -m mypy src


  doc-style:
    name: "Doc style check"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "3.4.1"

  wheelhouse:
    name: "Wheelhouse and smoke tests"
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          check-licenses: ${{ matrix.python-version != '3.9' }}

  tests:
    name: "Test ${{ matrix.os }} using Python ${{ matrix.python-version }}"
    needs: [wheelhouse]
    runs-on: ${{ matrix.os }}
    env:
      PYTEST_EXTRA_ARGS: "--cov=ansys.optislang.core --cov-report=term --cov-report=xml:.cov/coverage.xml --cov-report=html:.cov/html"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
      fail-fast: false

    steps:
      - name: "Run pytest with desired markers and extra arguments"
        uses: ansys/actions/tests-pytest@v10
        with:
          python-version: ${{ matrix.python-version }}
          pytest-extra-args: ${{ env.PYTEST_EXTRA_ARGS }}

      - name: "Upload coverage results as artifacts"
        uses: actions/upload-artifact@v4
        if: |
          (matrix.python-version == env.MAIN_PYTHON_VERSION) &&
          (runner.os == 'Linux')
        with:
          name: HTML-Coverage
          path: .cov/html
          retention-days: 7

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   if: |
      #     (matrix.cfg.python-version == env.MAIN_PYTHON_VERSION) &&
      #     (runner.os ==  'Linux')
      #   with:
      #     files: .cov/coverage.xml

  security:
    name: "Vulnerability check"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-vulnerabilities@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          python-package-name: 'ansys-optislang-core'
          dev-mode: ${{ github.ref != 'refs/heads/main' }}

  doc:
    name: "Documentation"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          dependencies: "pandoc"

  build-library:
    name: "Build library"
    needs: [doc, tests]
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: build-library
    runs-on: ubuntu-latest
    steps:
      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_dev_docs:
    name: "Upload development documentation"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-library
    steps:
      - uses: ansys/actions/doc-deploy-dev@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  upload_docs_release:
    name: "Upload release documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: ansys/actions/doc-deploy-stable@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
